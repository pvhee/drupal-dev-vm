---

# Simple Drupal Development VM Playbook for Ubuntu 12.04
#
# This extremely simple Ansible playbook sets up a minimalistic Drupal
# environment for local testing. It is built for Ubuntu 12.04, and is structured
# in the most simple way possible. It uses most Ansible best practices, but as
# far as organization goes, this playbook doesn't use roles, groups, etc., and
# should definitely be structured differently (using includes for each group of
# tasks) if you're using it to manage real-world infrastructure.
#
# There is a vars.yml file containing some variables to choose what version of
# Drupal will be installed, and what the domain name (plus '.dev') will be.
#
# @author Jeff Geerling, 2014

- hosts: all

  vars_files:
  - vars.yml

  pre_tasks:
  - name: Update apt cache if needed.
    apt: update_cache=yes cache_valid_time=3600

  handlers:
  - name: restart apache
    command: service apache2 restart

  tasks:
  # COMMON #####################################################################
  - name: "Common: Get software for apt repository management."
    apt: pkg={{ item }} state=installed
    with_items:
    - python-apt
    - python-pycurl

  - name: "Common: Add ondrej repository for later versions of PHP."
    # Note: You can remove '-oldstable' for PHP 5.5.x.
    apt_repository: repo='ppa:ondrej/php5'

  - name: "Common: Install Apache, MySQL, PHP, and other dependencies."
    apt: pkg={{ item }} state=installed
    with_items:
    - git
    - curl
    - sendmail
    - apache2
    - php5
    - php5-common
    - php5-mysql
    - php5-cli
    - php5-curl
    - php5-gd
    - php5-dev
    - php5-mcrypt
    - php-apc
    - php-pear
    - python-mysqldb
    - mysql-server

  - name: "Common: Disable the firewall (since this is for local dev only)."
    service: name=ufw state=stopped

  - name: "Common: Start Apache, MySQL, and PHP."
    service: name={{ item }} state=started enabled=yes
    with_items:
    - apache2
    - mysql

  # APACHE #####################################################################
  - name: "Apache: Enable mods required for Drupal."
    file: src=/etc/apache2/mods-available/{{ item }} dest=/etc/apache2/mods-enabled/{{ item }} state=link
    with_items:
    - rewrite.load
    notify: restart apache

  - name: "Apache: Add Apache virtualhost for Drupal 8 development."
    template: src=templates/drupal.dev.conf.j2 dest=/etc/apache2/sites-available/{{ domain }}.dev.conf owner=root group=root mode=0644
    notify: restart apache

  - name: "Apache: Symlink Drupal virtualhost to sites-enabled."
    file: src=/etc/apache2/sites-available/{{ domain }}.dev.conf dest=/etc/apache2/sites-enabled/{{ domain }}.dev.conf state=link
    notify: restart apache

  - name: "Apache: Remove default virtualhost file."
    file: path=/etc/apache2/sites-enabled/000-default state=absent
    notify: restart apache

  # # PHP ########################################################################
  # - name: "PHP: Enable upload progress via APC."
  #   lineinfile: dest=/etc/php5/conf.d/20-apc.ini regexp="^apc\.rfc1867" line="apc.rfc1867 = 1"
  #   notify: restart apache

  # MYSQL ######################################################################
  - name: "MySQL: Remove the MySQL test database."
    mysql_db: db=test state=absent

  - name: "MySQL: Create a database for Drupal."
    mysql_db: db={{ domain }} state=present

  # COMPOSER ###################################################################
  - name: "Composer: Install Composer into the current directory."
    shell: curl -sS https://getcomposer.org/installer | php creates=/usr/local/bin/composer

  - name: "Composer: Move Composer into globally-accessible location."
    shell: mv composer.phar /usr/local/bin/composer creates=/usr/local/bin/composer


  # - name: "Install Phing"
  #   command:
  #     # pear channel-discover pear.phing.info
  #     pear install [--alldeps] phing/phing

  # PHING
  # - name: Setup phing PEAR channel.
  #   command: pear channel-discover pear.phing.info
  #   register: channel_result
    # environment: proxy_env
    # changed_when: "'initialized' not in channel_result.stdout"
    # TODO: This will always error out the first time it's run.
    # failed_when: "'already initialized' not in channel_result.stdout"

  # - name: Install phing.
  #   command: pear install phing/phing
  #   register: phing
    # environment: proxy_env
    # changed_when: "'installed' not in drush_result.stdout"
    # failed_when: "'6.2.0.0' not in drush_result.stdout"

  # DRUSH ######################################################################
  - name: "Drush: Check out drush master branch so it works with all Drupal versions."
    git: repo=https://github.com/drush-ops/drush.git dest=/opt/drush

  - name: "Install Drush dependencies with Composer."
    shell: >
      /usr/local/bin/composer install
      chdir=/opt/drush
      creates=/opt/drush/vendor/autoload.php

  - name: "Drush: Create drush bin symlink."
    file: src=/opt/drush/drush dest=/usr/local/bin/drush state=link

  - name: "Drush: Run drush to finish setting it up."
    command: drush
    register: drush_result
    changed_when: "'Execute a drush command' not in drush_result.stdout"

  # DRUPAL #####################################################################
  # Download Drupal using drush (--no-cache prevents checksum error).
  - name: "Drupal: Download Drupal Core."
    command:
      drush dl drupal-{{ drupal_core_version }} --no-cache
      creates=/var/www/drupal-{{ drupal_core_version }}-dev/index.php
      chdir=/var/www

  # # Download Drupal using Git.
  # - name: "Drupal: Check out Drupal Core to the Apache docroot."
  #   git:
  #     repo=http://git.drupal.org/project/drupal.git
  #     version={{ drupal_core_version }}
  #     dest=/var/www/drupal-{{ drupal_core_version }}-dev


  # Download Drupal using Git.
  - name: "Drupal: Check out ALW to the Apache docroot."
    action: git repo=git@github.com:ArteGEIE/LiveWeb-KW.git dest=/var/www/alw version=HEAD

  # # Download our MZ box
  # - name: "Drupal: Check out Foundation."
  #   git:
  #     repo=https://github.com/marzeelabs/mz_box.git
  #     version=HEAD
  #     dest=/var/www/mz_box

  # Build with phing
  - name: "Build with Phing."
    command:
      chdir=/var/www/mz_box
      phing build
    notify: restart apache

  # # Download Drupal using Git.
  # - name: "Drupal: Check out Foundation."
  #   git:
  #     repo=git@github.com:ArteGEIE/ArteFoundation.git
  #     version=HEAD
  #     dest=/var/www/alw/profiles/foundation

  # - name: "Drupal: Install Drupal."
  #   command:
  #     drush si alw -y --site-name="{{ drupal_site_name }}" --account-name=admin --account-pass=admin --db-url=mysql://root@localhost/drupaltest
  #     chdir=/var/www/alw
  #     creates=/var/www/alw/sites/default/settings.php
  #   notify: restart apache

  # # SEE: https://drupal.org/node/2121849#comment-8413637
  # - name: "Drupal: Set permissions properly on settings.php."
  #   file: path=/var/www/drupal-{{ drupal_core_version }}-dev/sites/default/settings.APC mode=0744

  # - name: "Drupal: Set permissions properly on files directory."
  #   file: path=/var/www/drupal-{{ drupal_core_version }}-dev/sites/default/files mode=0777 state=directory recurse=yes
